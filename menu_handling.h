#include "WString.h"
#ifndef MENUHANDLER_H
  #define MENUHANDLER_H
  #include "structs.h"
  #include <vector>

  extern MENU MainMenu;
  extern MENU Mp3Menu;
  extern MENU PickTest;
  extern MENU DirSelect;
  extern MENU WifiSelect;
  void enter_submenu(void *);//dekalruje tu, lecz definiuje pozniej
  void enter_parent(void *);
  void pick_a_string(void * target);
  void int_change(void * variable);
  void sd_player(void*);
  void update_dirs_and_enter(void*);
  void display_voltage(void*);
  void list_networks_and_enter(void*);

  std::vector<MENUITEM> Mp3MenuItems = {
    {
      "Play",
      &sd_player,
      NULL,
      NULL,
      NULL,
      {0,0}
    },
    {
      "Select folder",
      &update_dirs_and_enter,
      NULL,
      &DirSelect,
      NULL,
      {0,0}
    },
    {
      "/",
      &DONOTSELECT,
      NULL,
      NULL,
      NULL,
      {0,0}
    },
    {
      "--BACK--",
      &enter_parent,
      NULL,
      NULL,
      NULL,
      {0,0}
    }
  };

  MENU Mp3Menu = {
    "MP3 Menu",      // Menu title
    &Mp3MenuItems,         // Items (can add later)
    Mp3MenuItems.size(),               // Number of items
    &MainMenu,          // Parent menu
    2 //style
  };


  std::vector<MENUITEM> ConfigMenuItems = {
    {
      "select WiFi",
      &list_networks_and_enter,
      NULL,
      &WifiSelect,
      NULL,
      {0,0}
    },
    {
      "Battery voltage",
      &display_voltage,
      NULL,
      NULL,
      NULL,
      {0,0}
    },
    {
      "--BACK--",
      &enter_parent,
      NULL,
      NULL,
      NULL,
      {0,0}
    }
  };

  MENU ConfigMenu = {
    "CONFIG",      // Menu title
    &ConfigMenuItems,         // Items (can add later)
    ConfigMenuItems.size(),               // Number of items
    &MainMenu,          // Parent menu
    2 //style
  };


  std::vector<MENUITEM> MainMenuItems = {
    {
      "MP3",
    &enter_submenu,
    NULL,
    &Mp3Menu,
    (const unsigned char[]){0xfc,0xff,0x07,0x02,0x00,0x08,0xa9,0xaa,0x12,0xa9,0xaa,0x12,0xa9,0xaa,0x12,0x01,0x00,0x10,0x01,0x00,0x20,0x01,0x00,0x40,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0xf0,0xa1,0xe6,0x10,0xe1,0x8a,0x10,0xe1,0x46,0x10,0xa1,0x82,0x10,0xa1,0x62,0xf0,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0x01,0x00,0x80,0xf1,0xff,0x8f,0x09,0x00,0x90,0x05,0x00,0xa0,0x02,0x00,0x40,0xfc,0xff,0x3f},
    {24,31}
    },
    {
      "RADIO",
    NULL,
    NULL,
    NULL,
    (const unsigned char[]){0x00,0xff,0xff,0xff,0x1f,0x00,0x80,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x80,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x08,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x00,0x04,0x02,0x00,0x00,0x00,0x00,0x08,0x01,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x10,0xf9,0xff,0xff,0xff,0xff,0x13,0x05,0x00,0x00,0x00,0x00,0x14,0x05,0x7c,0x00,0xfe,0xff,0x14,0x05,0x83,0x01,0x02,0x86,0x14,0x85,0x00,0x02,0x02,0x86,0x14,0x45,0x00,0x04,0x02,0x86,0x14,0x25,0x00,0x08,0xfe,0xff,0x14,0x25,0x00,0x08,0x00,0x00,0x14,0x15,0x00,0x10,0x00,0x00,0x14,0x15,0x00,0x10,0x00,0x00,0x14,0x15,0x00,0x10,0x1c,0x38,0x14,0x15,0x00,0x10,0x22,0x44,0x14,0x16,0x00,0x10,0x22,0x44,0x0c,0x24,0x00,0x08,0x22,0x44,0x04,0x24,0x00,0x08,0x1c,0x38,0x04,0x44,0x00,0x04,0x00,0x00,0x04,0x84,0x00,0x02,0x00,0x00,0x04,0x04,0x83,0x01,0xcf,0xf3,0x04,0x04,0x7c,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x04,0xf8,0xff,0xff,0xff,0xff,0x03},
    {45,32}
    },
    {
      "BT (sink)",
    NULL,
    NULL,
    NULL,
    (const unsigned char[]){0x80,0x00,0x40,0x01,0x40,0x02,0x40,0x04,0x40,0x08,0x40,0x10,0x40,0x20,0x40,0x40,0x41,0x20,0x42,0x10,0x44,0x08,0x48,0x04,0x50,0x02,0x60,0x01,0xc0,0x00,0x60,0x01,0x50,0x02,0x48,0x04,0x44,0x08,0x42,0x10,0x41,0x20,0x40,0x40,0x40,0x20,0x40,0x10,0x40,0x08,0x40,0x04,0x40,0x02,0x40,0x01,0x80,0x00},
    {15,29}
    },
    {
      "CONFIG",
    &enter_submenu,
    NULL,
    &ConfigMenu,
    (const unsigned char[]){0x00,0xe0,0x00,0x00,0xa8,0x02,0x00,0x14,0x05,0x00,0x02,0x08,0x00,0xe0,0x04,0xc0,0x73,0x19,0x48,0xf2,0x11,0x54,0xea,0x19,0x22,0xc4,0x04,0x04,0x20,0x08,0x88,0x11,0x05,0x47,0xe2,0x02,0x21,0x84,0x00,0x21,0x84,0x00,0x47,0xe2,0x00,0x88,0x11,0x00,0x04,0x20,0x00,0x22,0x44,0x00,0x54,0x2a,0x00,0x48,0x12,0x00,0xc0,0x03,0x00},
    {21,21}
    }
    
  };

  MENU MainMenu = {
    "MAIN",
    &MainMenuItems,
    MainMenuItems.size(),
    NULL,
    0
  };


  std::vector<MENUITEM> PickTestItems = {
    {
      "Pick test",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    },
    {
      "Ala ma kota",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    },
    {
      "Lorem Ipsum",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    },
    {
      "DoNaLd TrUmP",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    },
    {
      "ELOELOELO",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    },
    {
      "Opcja 6",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    }
  };

  MENU PickTest = {
    "Test",
    &PickTestItems,
    PickTestItems.size(),
    &Mp3Menu,
    2
  };


  std::vector<MENUITEM> DirSelectItems = {
    {
      "Error",
      &pick_a_string,
      &Mp3MenuItems[2].title,
      NULL,
      NULL,
      {0,0}
    }
  };

  MENU DirSelect = {
    "dir",
    &DirSelectItems,
    DirSelectItems.size(),
    &Mp3Menu,
    2
  };


  std::vector<MENUITEM> WifiSelectItems{
    {
      "--BACK--",
      &enter_parent,
      NULL,
      NULL,
      NULL,
      {0,0}
    }
  };

  MENU WifiSelect = {
    "WiFi",
    &WifiSelectItems,
    WifiSelectItems.size(),
    &ConfigMenu,
    2
  };
  //variables for menu navigation
  uint8_t element_index = 0;
  MENU * current_menu = &MainMenu;

  //handles navigation through menu (moves current selection forwards)
  void next_el(){ 
    element_index = min(current_menu->numItems-1,element_index+1);
    display_current_menu();
  }

  //handles navigation through menu (moves current selection backwards)
  void prev_el(){
    element_index = max(0,element_index-1);
    display_current_menu();
  }

  //handles navigation through menu (goes back to the parent menu if exists)
  void enter_parent(void *){ //go to menu's parent
    if(current_menu->parentMenu != NULL){
      current_menu = current_menu->parentMenu;
      element_index = 0;
    } 
    display_current_menu();
  }

  //handles navigation through menu (goes to the according submenu)
  void enter_submenu(void *){ //go to the submenu
    if((*current_menu->items)[element_index].subMenu != NULL){
      current_menu = (*current_menu->items)[element_index].subMenu;
      element_index = 0;
      display_current_menu();
    }
  }


  //changes selected string value
  void pick_a_string(void * target){
    String * var = (String*) target;
    *var = (*current_menu->items)[element_index].title;
    enter_parent(nullptr);
  }


  //runs according action assigned to the MENUITEM
  void on_press(){ 
    //Serial.println("click");
    if((*current_menu->items)[element_index].action != NULL){
      //Serial.println("there is something");
      (*current_menu->items)[element_index].action((*current_menu->items)[element_index].param);
    }
  }

#endif